#!/bin/bash
p_checkRoot(){
    if [ "$(id -u)" -eq 0 ]; then
        return 0
    fi
    return 1
}
p_colorSetup(){
    if [ "$(tput colors)" -ge 8 ]; then
        p_res=$(tput sgr0)
        p_bold=$(tput bold)
        p_time=$(tput bold;tput setaf 8)
        p_mpx=$(tput bold;tput setaf 5)
        if p_checkRoot; then
            p_name=$(tput bold;tput setaf 1)
            p_host=$(tput setaf 1)
        else
            p_name=$(tput bold;tput setaf 2)
            p_host=$(tput setaf 2)
        fi
        p_dir=$(tput setaf 6)
        p_red=$(tput setaf 1)
        p_green=$(tput setaf 2)
        #p_blue=$(tput setaf 4)
    else
        p_res=$(tput sgr0)
        p_bold=$(tput bold)
        p_time=''
        p_mpx=$(tput bold)
        p_name=$(tput bold)
        p_host=''
        p_dir=''
        p_red=$(tput bold)
        p_green=''
        #p_blue=''
    fi
}
p_returnColor(){
    if [ "${1}" -eq 0 ]; then
        local color="${p_green}"
    else
        local color="${p_red}"
    fi
    p_return="[R:\\001${color}\\002${1}\\001${p_res}\\002]"
}
p_multiplex(){
    if [ ${SHLVL} -gt 1 ]; then
        case "$TERM" in
            *screen*|*tmux*)
                p_multiplex="[\\001${p_mpx}\\002M\\001${p_res}\\002]"
            ;;
            *)
                p_multiplex=''
            ;;
        esac
    fi
}
p_leftLines(){
    if [ "${P_LL}" = "1" ]; then
        p_lineTop="$(printf '\342\224\214\342\224\200')" 
        p_lineBottom="$(printf '\342\224\224\342\224\200')" 
    else
        p_lineTop=
        p_lineBottom=
    fi
}
p_checkGit(){
    p_gitinfo=
    if [ ! "${NOGITPROMPT}" = "1" ]; then
        if git branch 1>/dev/null 2>&1; then
            if p_gitbranch=$(git symbolic-ref --short HEAD 2>/dev/null); then
                p_gitbranch="\\001${p_bold}${p_green}\\002${p_gitbranch}\\001${p_res}\\002"
            else
                p_gitbranch="\\001${p_bold}${p_red}\\002Detached-Head\\001${p_res}\\002"
            fi
            p_gitstatus=
            if [ "$(git status --short)" = "" ]; then
                p_gitstatus="[Working Clean]"
            else
                if git status --short | grep -q '^ M'; then
                    p_gitstatus+="[\\001${p_red}\\002Uncommited Changes\\001${p_res}\\002]"
                fi
                if git status --short | grep -q '^??'; then
                    p_gitstatus+="[\\001${p_red}\\002Untracked Files\\001${p_res}\\002]"
                fi
                if git status --short | grep -q '^A'; then
                    p_gitstatus+="[\\001${p_green}\\002Newly Added Files\\001${p_res}\\002]"
                fi
            fi


            p_gitinfo="[\\001${p_time}\\002Git\\001${p_res}\\002]"
            p_gitinfo+="[Branch:${p_gitbranch}]${p_gitstatus}\\n"
        fi
    fi
}
p_buildPrompt(){
    #Set Up Environment
    ret=$?
    p_returnColor ${ret}

    p_checkGit

    #Build PS1
    #Line at the top if enabled
    PS1="\\[${p_lineTop}\\]"

    #Git Info When Applicable
    PS1+="${p_gitinfo}"

    #[00:00]
    PS1+="[\\[${p_time}\\]\\A\\[${p_res}\\]]"

    #[M]
    PS1+="${p_multiplex}"

    #[user@hostname]:
    PS1+="[\\[${p_name}\\]\\u\\[${p_res}\\]@\\[${p_host}\\]\\h\\[${p_res}\\]]: "

    #~/working/path
    PS1+="\\[${p_dir}\\]\\w\\[${p_res}\\]"

    #Line Break
    PS1+="\\n"

    #Line at the bottom if enabled
    PS1+="\\[${p_lineBottom}\\]"

    #[R:0] $
    PS1+="${p_return}"

    #Level
    PS1+="[LV:\\001${p_bold}${p_dir}\\002${SHLVL}\\001${p_res}\\002]"

    #Prompt Character
    PS1+=" \\$ "
}

p_promptSetup(){
    p_colorSetup
    p_multiplex
    p_leftLines
}

p_promptSetup
PROMPT_COMMAND=p_buildPrompt

