#!/bin/sh
case "${1}" in
   "-h"|"--help")
        echo " TmuxAN (Tmux [A]ttach [N]ew)" 
        echo
        echo " Requirements"
        echo "   tput"
        echo "   tmux"
        echo 
        echo " Usage: tmuxan <session name>"
        echo "   Will attach to an existing session or will"
        echo "   create a new one if the specified session does not exist."
        echo
        echo " Special Uses"
        echo "   'tmuxan ls' - List Existing Sessions"
        echo "   'tmuxan ls --force' -  Create or attach to a session named 'ls'"
        echo "   'tmuxan --help' or 'tmuxan -h' - Print this help message and exit"
        echo 
        exit 0
    ;;
esac
errMsg(){
    printf '%b\n' "${tpBold}${tpRed}${1}${tpReset}"
}

tpRed=$(tput setaf 1 2>/dev/null || printf '')
tpBold=$(tput bold 2>/dev/null || printf '')
tpReset=$(tput sgr0 2>/dev/null || printf '')

if [ ! "$(command -v tmux)" ]; then
    errMsg "Error: Tmux binary is not present in path.\\nThis script is a wrapper for Tmux, and is useless without it."
    exit 1
fi

case ${1} in
    "")
        errMsg "Error: You must specify a new or existing session name.\\n  Use -h or --help for usage instructions."
        running=$(tmux ls 2>/dev/null)
        if [ ! -z "${running}" ]; then
            printf '\nCurrent Running Sessions\n------------------------\n%b\n\n' "${running}"
        fi
        exit 1
    ;;
    "ls")
        if [ ! "${2}" = "--force" ]; then
            running=$(tmux ls 2>/dev/null)
            if [ ! -z "${running}" ]; then
            printf 'Current Running Sessions\n------------------------\n%b\n\n' "${running}"
            exit 0
            fi
        fi
    ;;
esac

#tmux a -t "${1}" 2>/dev/null || tmux new -s "${1}"

# The above line shouldn't be needed since the -A switch to
# new-session functions exactly like I was replicating with
# the above command.
#
# The version I have below this line should be functionally
# identical.

tmux new-session -A -s "${1}"

